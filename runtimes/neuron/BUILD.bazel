load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:select_file.bzl", "select_file")
load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_cc//cc:cc_shared_library.bzl", "cc_shared_library")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("@rules_uv//uv:pip.bzl", "pip_compile")
load("@rules_zig//zig:defs.bzl", "zig_library")
load("@zml//bazel:cc_import.bzl", "cc_import")
load("@zml//bazel:patchelf.bzl", "patchelf")
load("@zml//bazel:runfiles.bzl", "runfiles_to_default")
load(":neuron.bzl", "py_binary_with_script")
load(":pyenv.bzl", "pyenv_zig")

pyenv_zig(
    name = "libneuronxla_pyenv_zig",
    deps = [":libneuronxla"],
)

zig_library(
    name = "libneuronxla_pyenv",
    main = ":libneuronxla_pyenv_zig",
)

pip_compile(
    name = "update_requirements",
    args = [
        "--generate-hashes",
        "--emit-index-url",
        "--emit-find-links",
        "--no-strip-extras",
        "--index-strategy=unsafe-best-match",
        "--upgrade",
    ],
    python_platform = "x86_64-unknown-linux-gnu",
    requirements_in = "requirements.in",
    requirements_txt = "requirements.lock.txt",
    tags = [
        "manual",
    ],
)

py_console_script_binary(
    name = "neuronx-cc",
    binary_rule = py_binary_with_script,
    pkg = "@neuron_py_deps//neuronx_cc",
    visibility = ["//visibility:public"],
)

py_binary_with_script(
    name = "libneuronxla",
    srcs = ["empty.py"],
    main = "empty.py",
    deps = [
        ":neuronx-cc",
        "@neuron_py_deps//libneuronxla",
    ],
)

cc_library(
    name = "libpython",
    hdrs = ["libpython.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@rules_python//python/cc:current_py_cc_headers",
        "@rules_python//python/cc:current_py_cc_libs",
    ],
)

compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    py_binary = py_binary_with_script,
    requirements_txt = "requirements.lock.txt",
    tags = [
        "manual",
    ],
)

runfiles_to_default(
    name = "libneuronxla_files",
    deps = ["@neuron_py_deps//libneuronxla:pkg"],
)

select_file(
    name = "libneuronpjrt_so",
    srcs = ":libneuronxla_files",
    subpath = "site-packages/libneuronxla/libneuronpjrt.so",
)

patchelf(
    name = "libpjrt_neuron.patchelf",
    add_needed = [
        "libpython3.11.so.1.0",
        "libzmlxneuron.so.0",
        "libnccom.so.2",
    ],
    set_rpath = '$ORIGIN',
    shared_library = ":libneuronpjrt_so",
    soname = "libpjrt_neuron.so",
)

cc_library(
    name = "zmlxneuron_lib",
    srcs = ["zmlxneuron.c"],
    linkopts = ["-ldl"],
)

cc_shared_library(
    name = "zmlxneuron_so_",
    shared_lib_name = "libzmlxneuron.so.0",
    deps = [":zmlxneuron_lib"],
)

copy_file(
    name = "zmlxneuron_so",
    src = ":zmlxneuron_so_",
    out = "lib/libzmlxneuron.so.0",
)

alias(
    name = "bootstrap",
    actual = "@rules_python//python/config_settings:bootstrap_impl",
)

cc_library(
    name = "empty",
)

copy_to_directory(
    name = "sandbox",
    srcs = [
        ":libneuronxla",
        ":zmlxneuron_so",
        ":libpjrt_neuron.patchelf",
        "@aws-neuronx-runtime-lib//:libnrt.patchelf",
        "@aws-neuronx-runtime-lib//:libncfw.patchelf",
        "@aws-neuronx-collectives//:libnccom",
        # "@rules_python//python/cc:current_py_cc_libs",
    ],
    replace_prefixes = {
        "libpjrt_neuron.patchelf": "lib",
        "libnrt.patchelf": "lib",
        "libncfw.patchelf": "lib",
        "lib/x86_64-linux-gnu": "lib",
        "usr/lib/x86_64-linux-gnu": "lib",
        "opt/neuron": "lib",
    },
    add_directory_to_runfiles = True,
    include_external_repositories = ["**"],
)

cc_library(
    name = "libpjrt_neuron",
    hdrs = ["libpjrt_neuron.h"],
    defines = ["ZML_RUNTIME_NEURON"],
    data = [
        ":libneuronxla",
        ":sandbox", 
    ],
    deps = [
        "@aws-neuronx-runtime-lib//:libnrt_headers",
    ],
)

zig_library(
    name = "neuron",
    import_name = "runtimes/neuron",
    main = "neuron.zig",
    visibility = ["//visibility:public"],
    deps = [
        "//pjrt",
    ] + select({
        "//runtimes:neuron.enabled": [
            ":libneuronxla_pyenv",
            ":libpjrt_neuron",
            ":libpython",
            "//async",
            "//stdx",
            "@rules_zig//zig/runfiles",
        ],
        "//conditions:default": [":empty"],
    }),
)

filegroup(
    name = "layers",
    srcs = [],
    visibility = ["//visibility:public"],
)
