load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("@rules_uv//uv:pip.bzl", "pip_compile")
load("@rules_zig//zig:defs.bzl", "BINARY_KIND", "zig_binary", "zig_library")
load("@zml//bazel:zig.bzl", "zig_cc_binary")
load(":neuron.bzl", "py_binary_with_script")
load(":pyenv.bzl", "pyenv_zig")

# load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
# load("@zml//bazel:patchelf.bzl", "patchelf")
# load("@zml//bazel:runfiles.bzl", "runfiles_to_default")


# runfiles_to_default(
#     name = "runfiles",
#     deps = ["@neuron_py_deps//neuronx_cc"],
# )

# copy_to_directory(
#     name = "pysandbox",
#     srcs = [
#         ":bin/neuronx-cc",
#         "@rules_python//python:current_py_toolchain",
#         ":runfiles",
#     ],
#     allow_overwrites = True,
#     add_directory_to_runfiles = True,
#     include_external_repositories = ["**"],
#     include_srcs_patterns = [
#         "bin/neuronx-cc",
#         "lib/libpython3.11*/**",
#         "lib/python*/**",
#         "site-packages/**",
#     ],
#     hardlink = "on",
# )

pyenv_zig(
    name = "libneuronxla_pyenv_zig",
    deps = ["@neuron_py_deps//libneuronxla"],
)

zig_library(
    name = "libneuronxla_pyenv",
    main = ":libneuronxla_pyenv_zig",
)

pyenv_zig(
    name = "neuronx_cc_pyenv_zig",
    deps = ["@neuron_py_deps//neuronx_cc"],
)

zig_library(
    name = "neuronx_cc_pyenv",
    main = ":neuronx_cc_pyenv_zig",
)

# A proxy PJRT Plugin that loads the Neuron PJRT Plugin
# and returns the instance from nested GetPjrtApi.
#
# Additionally, it provides a way to load implicit transitive dependencies
# of neuronx-cc (see add_needed of the patchelf target below).
#
# TODO(cerisier): Use a zig_cc_shared_library instead.
zig_binary(
    name = "libpjrt_neuron_proxy",
    kind = BINARY_KIND.shared_lib,
    main = "libpjrt_neuron.zig",
    copts = ["-lc"],
    deps = [
        "//stdx",
        "@rules_zig//zig/runfiles",
        ":libpython",
    ],
    visibility = ["@libpjrt_neuron//:__subpackages__"],
)

pip_compile(
    name = "update_requirements",
    args = [
        "--generate-hashes",
        "--emit-index-url",
        "--emit-find-links",
        "--no-strip-extras",
        "--index-strategy=unsafe-best-match",
        "--upgrade",
    ],
    python_platform = "x86_64-unknown-linux-gnu",
    requirements_in = "requirements.in",
    requirements_txt = "requirements.lock.txt",
    tags = [
        "manual",
    ],
)

zig_cc_binary(
    name = "neuronx-cc",
    main = "neuronx-cc.zig",
    data = [
        "@neuron_py_deps//neuronx_cc",
    ],
    linkopts = [
        "-Wl,-rpath,$ORIGIN/../lib",
    ],
    deps = [
        # ":neuronx_cc_pyenv",
        ":libpython",
        "//async",
        "//stdx",
        "@rules_zig//zig/runfiles",
    ],
    tags = [
        "manual",
    ],
    visibility = ["//visibility:public"],
)

py_binary_with_script(
    name = "libneuronxla",
    srcs = ["empty.py"],
    main = "empty.py",
    deps = [
        ":neuronx-cc",
        "@neuron_py_deps//libneuronxla",
    ],
)

cc_library(
    name = "libpython",
    hdrs = ["libpython.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@rules_python//python/cc:current_py_cc_headers",
        "@rules_python//python/cc:current_py_cc_libs",
    ],
)

compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    py_binary = py_binary_with_script,
    requirements_txt = "requirements.lock.txt",
    tags = [
        "manual",
    ],
)

cc_library(
    name = "zmlxneuron_lib",
    srcs = ["zmlxneuron.c"],
    linkopts = ["-ldl"],
    visibility = ["@libpjrt_neuron//:__subpackages__"],
)

alias(
    name = "bootstrap",
    actual = "@rules_python//python/config_settings:bootstrap_impl",
)

cc_library(
    name = "empty",
)

cc_library(
    name = "zmlxneuron",
    defines = ["ZML_RUNTIME_NEURON"],
)

cc_library(
    name = "libnrt_headers",
    hdrs = ["nrt.h"],
    deps = [
        "@libpjrt_neuron//:libnrt_headers",
    ],
)

zig_library(
    name = "neuron",
    import_name = "runtimes/neuron",
    main = "neuron.zig",
    visibility = ["//visibility:public"],
    data = select({
        "//runtimes:neuron.enabled": [
            ":libneuronxla",
        ],
        "//conditions:default": [],
    }),
    deps = [
        "//pjrt",
    ] + select({
        "//runtimes:neuron.enabled": [
            "@libpjrt_neuron",
            ":zmlxneuron",
            ":libnrt_headers",
            ":libneuronxla_pyenv",
            ":libpython",
            "//async",
            "//stdx",
            "@rules_zig//zig/runfiles",
        ],
        "//conditions:default": [":empty"],
    }),
)

filegroup(
    name = "layers",
    srcs = [
        "@apt_neuron//bash/amd64",
    ],
    visibility = ["//visibility:public"],
)
