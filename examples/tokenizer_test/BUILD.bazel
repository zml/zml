load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@rules_python//python:defs.bzl", "py_binary")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@zml//bazel:zig.bzl", "zig_cc_binary")

# This rule adds a convenient way to update the requirements file.
compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    requirements_txt = "requirements_lock.txt",
)

zig_cc_binary(
    name = "tokenizer_test_bin",
    main = "main.zig",
    deps = [
        "//third_party/tigerbeetle:flags",
        "@zml//async",
        "@zml//zml",
    ],
)

native_binary(
    name = "CodeLlama-7b-hf",
    src = ":tokenizer_test_bin",
    args = [
        "--tokenizer=$(location @CodeLlama-7b-hf//:tokenizer)",
        "--prompt='Hello world'",
    ],
    data = [
        "@CodeLlama-7b-hf//:tokenizer",
    ],
)

genrule(
    name = "zml_output",
    cmd = "$(location :tokenizer_test_bin) --tokenizer='$(location @CodeLlama-7b-hf//:tokenizer)' --prompt='$(location :input.txt)' > $@",
    tools = [":tokenizer_test_bin"],
    srcs = ["@CodeLlama-7b-hf//:tokenizer", "input.txt"],
    outs = ["zml_output.txt"],
)

py_binary(
    name = "hf_tokenizer",
    main = "tokenizer_test.py",
    srcs = ["tokenizer_test.py"],
    deps = ["@pypi//transformers:pkg"],
)

genrule(
    name = "hf_output",
    cmd = "$(location :hf_tokenizer) -m='codellama/CodeLlama-7b-hf' -p='$<' > $@",
    srcs = ["input.txt"],
    tools = [":hf_tokenizer"],
    outs = ["hf_output.txt"],
)

diff_test(
    name = "tokenizer_test",
    file1 = ":hf_output",
    file2 = ":zml_output",
)
