name: commit
on:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'master')}}

jobs:
  test:
    runs-on: ["runs-on","runner=4cpu-linux-x64", "image=ubuntu24-amd64", "run-id=${{ github.run_id }}", "extras=s3-cache"]
    steps:
      - uses: runs-on/action@v1
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.14.1
          mirror: https://mirror.zml.ai/zig

      - name: Zig Format
        run: zig fmt --check  $(git ls-files --exclude-standard -- '*.zig' | xargs)

      - name: No autofix in Zig code
        run: bash -c "! git grep -l '// autofix' -- '*.zig'"

      - uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: 1.26.0
          bazelisk-cache: true
          disk-cache: ${{ github.ref }}
          repository-cache: true
          external-cache: true
          bazelrc: |
            common --config=debug
            common --verbose_failures
            common --keep_going
            common --test_output=streamed
            common --color=yes
            common --show_timestamps

      - name: ZML / bazel mod explain
        run: bazel mod explain

      - name: ZML / bazel mod graph
        run: bazel mod graph

      - name: ZML / bazel query //...
        run: bazel query //...

      - name: ZML / bazel build //...
        run: bazel build //...

      - name: ZML / bazel test //...
        run: bazel test //...

      - name: Examples / bazel mod explain
        working-directory: examples/
        run: bazel mod explain

      - name: Examples / bazel mod graph
        working-directory: examples/
        run: bazel mod graph

      - name: Examples / bazel query //...
        working-directory: examples/
        run: bazel query //...

      - name: Examples / bazel build //...
        working-directory: examples/
        run: bazel build //...

      # Todo: uncomment when we have our first tests in examples, Bazel return code is not 0 if there are no tests
      # - name: Examples / bazel test //...
      #   working-directory: examples/
      #   run: bazel test //...

      - name: Detailed Disk Usage Report
        if: always() # failure
        run: |
          set -e
          echo "### 📊 Bazel Disk Usage Analysis ###"

          echo "::group::Gathering Bazel paths"
          OUTPUT_BASE=$(bazel info output_base)
          INSTALL_BASE=$(bazel info install_base)
          EXECUTION_ROOT=$(bazel info execution_root)
          # This might fail if not configured, so we handle the error
          DISK_CACHE=$(bazel info disk_cache 2>/dev/null || echo "N/A")
          EXTERNAL_REPOS="$OUTPUT_BASE/external"
          PROJECT_SOURCE_DIR=$(pwd)
          echo "::endgroup::"

          # Calculates size and returns a formatted string. Returns "N/A" if dir doesn't exist.
          get_size() {
            if [ -d "$1" ]; then
              du -sh "$1" | awk '{print $1}'
            else
              echo "N/A"
            fi
          }

          echo "::group::Calculating directory sizes"
          SIZE_OUTPUT_BASE=$(get_size "$OUTPUT_BASE")
          SIZE_EXTERNAL=$(get_size "$EXTERNAL_REPOS")
          SIZE_EXEC_ROOT=$(get_size "$EXECUTION_ROOT")
          SIZE_PROJECT=$(get_size "$PROJECT_SOURCE_DIR")
          SIZE_DISK_CACHE=$( [ "$DISK_CACHE" != "N/A" ] && get_size "$DISK_CACHE" || echo "N/A" )
          echo "::endgroup::"

          # This content will be written to the GitHub Action's summary page.
          {
            echo "## 📊 Bazel Disk Usage Report"
            echo ""
            echo "| Component                 | Size     | Path                                |"
            echo "|---------------------------|----------|-------------------------------------|"
            echo "| 📦 **Project Source**       | \`$SIZE_PROJECT\` | \`$PROJECT_SOURCE_DIR\`             |"
            echo "| 🏠 **Total Output Base**    | \`$SIZE_OUTPUT_BASE\` | \`$OUTPUT_BASE\`                    |"
            echo "| 🔗 External Repos         | \`$SIZE_EXTERNAL\` | \`$EXTERNAL_REPOS\`                 |"
            echo "| ⚙️ Execution Root         | \`$SIZE_EXEC_ROOT\` | \`$EXECUTION_ROOT\`                 |"
            echo "| 💾 **Disk Cache** (if any)  | \`$SIZE_DISK_CACHE\` | \`$DISK_CACHE\`                     |"
            echo ""
            echo "---"
            echo ""
            echo "### 💾 Overall Runner Disk Space"
            echo '```'
            df -h
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

          echo "::notice title=Bazel Disk Usage Summary::✅ Report generated. See the 'Summary' page for a detailed breakdown."
          echo "Total Output Base: $SIZE_OUTPUT_BASE"
          echo "External Repos: $SIZE_EXTERNAL"

          echo "::group::Overall Runner Disk Space"
          df -h
          echo "::endgroup::"
